apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: update-video-
spec:
  entrypoint: pipeline
  ttlSecondsAfterFinished: 500
  volumeClaimTemplates:
  - metadata:
      name: workdir
    spec:
      storageClassName: nfs-client
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
  volumes:
  - name: dockersock
    hostPath:
      path: /var/run/docker.sock
  templates:
  - name: pipeline
    steps:
    - - name: download
        template: download
    - - name: update-video
        template: update-video
        withParam: "{{steps.download.outputs.parameters.update-list}}"
  - name: download
    container:
      image: localhost:5000/tator_transcoder:latest
      resources:
        limits:
          cpu: 1000m
          memory: 1Gi
      env:
      - name: TATOR_MEDIA_IDS
        value: "{{workflow.parameters.media_ids}}"
      - name: TATOR_API_SERVICE
        value: "{{workflow.parameters.rest_url}}"
      - name: TATOR_AUTH_TOKEN
        value: "{{workflow.parameters.rest_token}}"
      - name: TATOR_PROJECT_ID
        value: "{{workflow.parameters.project_id}}"
      - name: TATOR_WORK_DIR
        value: "/work"
      volumeMounts:
      - name: workdir
        mountPath: /work
      command: [python3]
      args: ["/scripts/setupVideoUpdate.py"]
    outputs:
      parameters:
      - name: update-list
        valueFrom:
          path: "/work/update-list.json"
  - name: update-video
    container:
      image: localhost:5000/tator_transcoder:latest
      resources:
        limits:
          cpu: 4000m
          memory: 2Gi
      env:
      - name: TATOR_MEDIA_IDS
        value: "{{workflow.parameters.media_ids}}"
      - name: TATOR_API_SERVICE
        value: "{{workflow.parameters.rest_url}}"
      - name: TATOR_AUTH_TOKEN
        value: "{{workflow.parameters.rest_token}}"
      - name: TATOR_PROJECT_ID
        value: "{{workflow.parameters.project_id}}"
      - name: TATOR_WORK_DIR
        value: "/work"
      volumeMounts:
      - name: workdir
        mountPath: /work
      command: [python3]
      args: ["/scripts/tator/docker_entry.py"]
