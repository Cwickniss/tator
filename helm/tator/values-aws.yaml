domain: www.yourdomain.com
nginxReplicas: 5
gunicornReplicas: 20
transcoderReplicas: 6
algorithmReplicas: 2
djangoSecretKey: "<Your django secret key>"
dockerUsername: "<Your docker username>"
dockerPassword: "<Your docker password>"
dockerRegistry: "<Your aws account ID>.dkr.ecr.<Your aws region>.amazonaws.com"
sslBundle: |
  -----BEGIN CERTIFICATE-----
  <Insert certificate here>
  -----END CERTIFICATE-----
  -----BEGIN CERTIFICATE-----
  <Insert certificate here>
  -----END CERTIFICATE-----
sslKey: |
  -----BEGIN PRIVATE KEY-----
  <Insert private key here>
  -----END PRIVATE KEY-----
pv:
  enabled: true
  nfsServer: "<Your efs filesystem ID>.efs.<Your aws region>.amazonaws.com"
  nfsMountOptions:
    - nfsvers=4.1
    - rsize=1048576
    - wsize=1048576
    - hard
    - timeo=600
    - retrans=2
    - noresvport
  staticPath: "/static"
  uploadPath: "/upload"
  mediaPath: "/media"
  rawPath: "/raw"
  backupPath: "/backup"
  migrationsPath: "/migrations"
pvc:
  staticSize: 1Gi
  uploadSize: 1Ti
  mediaSize: 4Ti
  rawSize: 6Ti
  backupSize: 100Gi
  migrationsSize: 1Gi
metallb:
  enabled: false
redis:
  enabled: true
  master:
    nodeSelector:
      dbServer: "yes"
    persistence:
      enabled: false
  slave:
    persistence:
      enabled: false
  usePassword: false
metrics-server:
  enabled: true
  args:
    - --v=2
    - --kubelet-insecure-tls=true
    - --kubelet-preferred-address-types=InternalIP
elasticsearch:
  enabled: true
  persistence:
    enabled: true
  replicas: 3
  clusterHealthCheckParams: wait_for_status=yellow&timeout=1s
  volumeClaimTemplate:
    accessModes: [ "ReadWriteOnce" ]
    resources:
      requests:
        storage: 30Gi
  nodeSelector: 
    dbServer: "yes"
filebeat:
  enabled: true
kibana:
  enabled: true
  kibanaConfig:
    kibana.yml: |
      server:
        basePath: /logs
postgresql-ha:
  enabled: true
  persistence:
    enabled: true
    size: 8Gi
    storageClass: ebs
  postgresqlImage:
    registry: docker.io
    repository: bitnami/postgresql-repmgr
    tag: 11.6.0
  postgresql:
    replicaCount: 3
    username: postgres
    password: postgres123
    database: tator_online
    repmgrUsername: repmgr
    repmgrPassword: repmgr123
    repmgrDatabase: repmgr
    nodeSelector: 
      dbServer: "yes"
    pgHbaTrustAll: true
    configuration:
      listen_addresses: "'*'"
      port: "'5432'"
      wal_level: "'hot_standby'"
      archive_mode: "'on'"
      archive_command: "'/bin/true'"
      max_wal_senders: "'10'"
      max_replication_slots: "'10'"
      hot_standby: "'on'"
      logging_collector: "'on'"
      log_directory: "'/opt/bitnami/postgresql/logs'"
      log_filename: "'postgresql.log'"
      shared_preload_libraries: "'repmgr'"
      include_dir: "'conf.d'"
      max_connections: "1000"
      shared_buffers: "2GB"
      effective_cache_size: "6GB"
      maintenance_work_mem: "512GB"
      checkpoint_completion_target: "0.7"
      wal_buffers: "16MB"
      default_statistics_target: "100"
      random_page_cost: "1.1"
      effective_io_concurrency: "200"
      work_mem: "1048kB"
      min_wal_size: "1GB"
      max_wal_size: "2GB"
      max_worker_processes: "4"
      max_parallel_workers_per_gather: "2"
      max_parallel_workers: "4"
  pgpool:
    replicaCount: 2
    nodeSelector: 
      dbServer: "yes"
cluster-autoscaler:
  enabled: true
awsStorage:
  enabled: true
  ebs:
    type: io1
    iopsPerGb: "50"
